(()=>{var e={};e.id=240,e.ids=[240],e.modules={3295:e=>{"use strict";e.exports=require("next/dist/server/app-render/after-task-async-storage.external.js")},10846:e=>{"use strict";e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},12909:(e,t,s)=>{"use strict";s.d(t,{M:()=>i,j:()=>n});var r=s(85888),o=s(99425),a=s(45655);let n=(0,r.li)({database:(0,o._)(a.db,{provider:"postgresql"}),emailAndPassword:{enabled:!0,requireEmailVerification:!1},socialProviders:{google:{clientId:process.env.GOOGLE_CLIENT_ID,clientSecret:process.env.GOOGLE_CLIENT_SECRET,redirectURI:"http://localhost:3000/api/auth/callback/google"}},session:{expiresIn:604800,updateAge:86400},secret:process.env.BETTER_AUTH_SECRET,baseURL:process.env.BETTER_AUTH_URL||process.env.NEXTAUTH_URL||"http://localhost:3000",rateLimit:{window:6e4,max:10}});async function i(e){try{console.log("[getServerSession] Attempting to get server session...");let t=e.headers,s=await n.api.getSession({headers:t});return console.log("[getServerSession] Session:",s?"found":"not found"),s}catch(e){return console.error("[getServerSession] Error obtaining server session from better-auth:",e),null}}},29294:e=>{"use strict";e.exports=require("next/dist/server/app-render/work-async-storage.external.js")},44870:e=>{"use strict";e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},45655:(e,t,s)=>{"use strict";s.d(t,{db:()=>o});let r=require("@prisma/client"),o=global.prisma||new r.PrismaClient({log:["query"]})},63033:e=>{"use strict";e.exports=require("next/dist/server/app-render/work-unit-async-storage.external.js")},78335:()=>{},83807:(e,t,s)=>{"use strict";s.r(t),s.d(t,{patchFetch:()=>S,routeModule:()=>g,serverHooks:()=>h,workAsyncStorage:()=>E,workUnitAsyncStorage:()=>f});var r={};s.r(r),s.d(r,{DELETE:()=>m,GET:()=>p,PUT:()=>d,runtime:()=>u});var o=s(96559),a=s(48088),n=s(37719),i=s(32190),l=s(12909);let u="nodejs",c=process.env.DOCUSEAL_URL||"https://api.docuseal.com";async function p(e,{params:t}){let s=(await t).id;await (0,l.M)(e)||console.warn("[api/docuseal/templates/[id]] no session - proceeding as anonymous");try{let e=await fetch(`${c}/templates/${s}`,{headers:{"X-Auth-Token":process.env.DOCUSEAL_API_KEY??"","Content-Type":"application/json"}});if(!e.ok){let t=await e.json();return i.NextResponse.json(t,{status:e.status})}let t=await e.json();return i.NextResponse.json({data:t})}catch(t){let e=t instanceof Error?t.message:String(t);return console.error(`Error fetching DocuSeal template ${s}:`,e),i.NextResponse.json({message:"Internal Server Error",error:e},{status:500})}}async function d(e,{params:t}){let s=(await t).id;if(!await (0,l.M)(e))return i.NextResponse.json({message:"Unauthorized"},{status:401});try{let t;if((e.headers.get("content-type")||"").includes("multipart/form-data")){let r=(await e.formData()).get("file");if(!r)return i.NextResponse.json({message:"File is required for document update"},{status:400});let o=await r.arrayBuffer(),a=Buffer.from(o).toString("base64"),n=r.name||"document";t=await fetch(`${c}/templates/${s}/documents`,{method:"PUT",headers:{"X-Auth-Token":process.env.DOCUSEAL_API_KEY??"","Content-Type":"application/json"},body:JSON.stringify({documents:[{name:n,file:a}]})})}else{let r=await e.json();t=await fetch(`${c}/templates/${s}`,{method:"PUT",headers:{"X-Auth-Token":process.env.DOCUSEAL_API_KEY??"","Content-Type":"application/json"},body:JSON.stringify(r)})}if(!t.ok){let e=await t.json();return i.NextResponse.json(e,{status:t.status})}let r=await t.json();return i.NextResponse.json(r)}catch(t){let e=t instanceof Error?t.message:String(t);return console.error(`Error updating DocuSeal template ${s}:`,e),i.NextResponse.json({message:"Internal Server Error",error:e},{status:500})}}async function m(e,{params:t}){console.log("[api/docuseal/templates/[id]] DELETE request received for ID:",t.id);let s=await (0,l.M)(e);if(!s)return console.warn("[api/docuseal/templates/[id]] Unauthorized: No session found."),i.NextResponse.json({message:"Unauthorized"},{status:401});console.log("[api/docuseal/templates/[id]] Session found for user:",s.user?.email);let r=(await t).id;try{let e=process.env.DOCUSEAL_API_KEY;if(!e)return console.error("[api/docuseal/templates/[id]] DOCUSEAL_API_KEY is not set."),i.NextResponse.json({message:"Server configuration error: DocuSeal API key missing."},{status:500});console.log("[api/docuseal/templates/[id]] Using DOCUSEAL_API_KEY:",e?"present":"missing");let t=`${c}/templates/${r}?permanently=true`;console.log("[api/docuseal/templates/[id]] DELETE forwarding to DocuSeal",{outgoingUrl:t,hasApiKey:!!e});let s=await fetch(t,{method:"DELETE",headers:{"X-Auth-Token":e}});if(!s.ok){let e=await s.text(),t=e;try{t=JSON.parse(e)}catch{}return console.error("[api/docuseal/templates/[id]] DocuSeal DELETE error",{status:s.status,body:t}),i.NextResponse.json(t,{status:s.status})}return console.log("[api/docuseal/templates/[id]] DocuSeal DELETE success",{id:r}),i.NextResponse.json({message:"Template deleted successfully"},{status:200})}catch(t){let e=t instanceof Error?t.message:String(t);return console.error(`Error deleting DocuSeal template ${r}:`,e),i.NextResponse.json({message:"Internal Server Error",error:e},{status:500})}}let g=new o.AppRouteRouteModule({definition:{kind:a.RouteKind.APP_ROUTE,page:"/api/docuseal/templates/[id]/route",pathname:"/api/docuseal/templates/[id]",filename:"route",bundlePath:"app/api/docuseal/templates/[id]/route"},resolvedPagePath:"/home/maxwell/projects/projects/NextJs/Docu/src/app/api/docuseal/templates/[id]/route.ts",nextConfigOutput:"",userland:r}),{workAsyncStorage:E,workUnitAsyncStorage:f,serverHooks:h}=g;function S(){return(0,n.patchFetch)({workAsyncStorage:E,workUnitAsyncStorage:f})}},96487:()=>{}};var t=require("../../../../../webpack-runtime.js");t.C(e);var s=e=>t(t.s=e),r=t.X(0,[719,986,190],()=>s(83807));module.exports=r})();