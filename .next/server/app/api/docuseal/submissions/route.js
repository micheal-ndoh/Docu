(()=>{var e={};e.id=160,e.ids=[160],e.modules={1555:(e,s,t)=>{"use strict";t.r(s),t.d(s,{patchFetch:()=>x,routeModule:()=>h,serverHooks:()=>v,workAsyncStorage:()=>b,workUnitAsyncStorage:()=>f});var r={};t.r(r),t.d(r,{GET:()=>c,POST:()=>g,runtime:()=>d,syncSubmissionStatus:()=>m});var a=t(96559),n=t(48088),o=t(37719),i=t(32190),u=t(12909),l=t(45655);let d="nodejs",p=process.env.DOCUSEAL_URL||"https://api.docuseal.com";async function c(e){let s=await (0,u.M)(e);if(!s)return i.NextResponse.json({message:"Unauthorized - please sign in to view submissions"},{status:401});let t=s.user?.id;if(!t)return i.NextResponse.json({message:"User ID not found in session"},{status:400});try{let s=(await l.db.submission.findMany({where:{userId:t},include:{template:!0}})).map(e=>e.docusealId);if(0===s.length)return i.NextResponse.json({data:[],pagination:{count:0,next:null,prev:null}});let{searchParams:r}=new URL(e.url),a=new URLSearchParams,n=r.get("limit")||"10";a.append("limit",n),r.has("after")&&a.append("after",r.get("after")),r.has("before")&&a.append("before",r.get("before")),r.has("template_id")&&a.append("template_id",r.get("template_id"));let o=r.get("status")||"";"SENT"===o&&(o="pending"),"OPENED"===o&&(o=""),o&&"ALL"!==o&&a.append("status",o),r.has("q")&&a.append("q",r.get("q")),r.has("slug")&&a.append("slug",r.get("slug")),r.has("template_folder")&&a.append("template_folder",r.get("template_folder")),r.has("archived")&&a.append("archived",r.get("archived"));let u=`${p}/submissions?${a.toString()}`,d=await fetch(u,{headers:{"X-Auth-Token":process.env.DOCUSEAL_API_KEY??"","Content-Type":"application/json"}});if(!d.ok){let e=await d.json();return i.NextResponse.json(e,{status:d.status})}let c=await d.json(),m=Array.isArray(c)?c:c.data||[];if(m=m.filter(e=>s.includes(e.id)),Array.isArray(c))return i.NextResponse.json({data:m});return i.NextResponse.json({...c,data:m})}catch(e){return console.error("Error fetching DocuSeal submissions:",e),i.NextResponse.json({message:"Internal Server Error",error:e.message??String(e)},{status:500})}}async function m(e,s){try{await l.db.submission.update({where:{docusealId:e},data:{status:s}})}catch(s){console.error(`Error syncing submission ${e} status:`,s)}}async function g(e){let s=await (0,u.M)(e),t=e.headers.get("x-auth-token")||e.headers.get("X-Auth-Token"),r=process.env.DOCUSEAL_API_KEY??t??"";if(!s)return i.NextResponse.json({message:"Unauthorized - please sign in to create submissions"},{status:401});let a=s.user?.email,n=s.user?.id;if(!a||!n)return i.NextResponse.json({message:"User email or ID not found in session"},{status:400});try{let s=e.headers.get("content-type")||"";if(s.startsWith("multipart/form-data")){let t=await e.arrayBuffer(),a=await fetch(`${p}/submissions`,{method:"POST",headers:{"X-Auth-Token":r,"Content-Type":s},body:Buffer.from(t)});if(!a.ok){let e=await a.json();return i.NextResponse.json(e,{status:a.status})}let n=await a.json();return i.NextResponse.json(n,{status:201})}let t=await e.json();if(console.log("Received submission request:",JSON.stringify(t,null,2)),!t.template_id)return console.error("Missing template_id in request body"),i.NextResponse.json({message:"template_id is required",received:t},{status:400});if(!t.submitters||0===t.submitters.length)return console.error("Missing or empty submitters array"),i.NextResponse.json({message:"At least one submitter is required",received:t},{status:400});for(let e=0;e<t.submitters.length;e++){if(!t.submitters[e].email)return console.error(`Submitter ${e} missing email`),i.NextResponse.json({message:`Submitter ${e+1} must have an email address`},{status:400});t.submitters[e].external_id=n,t.submitters[e].metadata={...t.submitters[e].metadata,created_by_user_id:n,created_by_email:a}}console.log("Sending to DocuSeal API:",JSON.stringify(t,null,2));let o=await fetch(`${p}/submissions`,{method:"POST",headers:{"X-Auth-Token":r,"Content-Type":"application/json"},body:JSON.stringify(t)});if(!o.ok){let e=await o.json();return console.error("DocuSeal API error:",o.status,e),i.NextResponse.json(e,{status:o.status})}let u=await o.json();console.log("DocuSeal API success:",u);try{let e=Array.isArray(u)?u:[u];if(e.length>0&&e[0].submission_id){let s=e[0].submission_id,a=e[0].email,o=await l.db.template.findUnique({where:{docusealId:t.template_id}});if(!o){let e=await fetch(`${p}/templates/${t.template_id}`,{headers:{"X-Auth-Token":r,"Content-Type":"application/json"}}),s=await e.json();o=await l.db.template.create({data:{userId:n,docusealId:t.template_id,name:s.name||"Untitled Template"}})}await l.db.submission.create({data:{userId:n,docusealId:s,templateId:o.id,status:e[0].status||"pending",submitterEmail:a}}),console.log(`Saved submission ${s} to database for user ${n}`)}}catch(e){console.error("Error saving submission to database:",e)}return i.NextResponse.json(u,{status:201})}catch(e){return console.error("Error creating DocuSeal submission:",e),i.NextResponse.json({message:"Internal Server Error",error:e.message??String(e)},{status:500})}}let h=new a.AppRouteRouteModule({definition:{kind:n.RouteKind.APP_ROUTE,page:"/api/docuseal/submissions/route",pathname:"/api/docuseal/submissions",filename:"route",bundlePath:"app/api/docuseal/submissions/route"},resolvedPagePath:"/home/maxwell/projects/projects/NextJs/Docu/src/app/api/docuseal/submissions/route.ts",nextConfigOutput:"",userland:r}),{workAsyncStorage:b,workUnitAsyncStorage:f,serverHooks:v}=h;function x(){return(0,o.patchFetch)({workAsyncStorage:b,workUnitAsyncStorage:f})}},3295:e=>{"use strict";e.exports=require("next/dist/server/app-render/after-task-async-storage.external.js")},10846:e=>{"use strict";e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},12909:(e,s,t)=>{"use strict";t.d(s,{M:()=>i,j:()=>o});var r=t(85888),a=t(99425),n=t(45655);let o=(0,r.li)({database:(0,a._)(n.db,{provider:"postgresql"}),emailAndPassword:{enabled:!0,requireEmailVerification:!1},socialProviders:{google:{clientId:process.env.GOOGLE_CLIENT_ID,clientSecret:process.env.GOOGLE_CLIENT_SECRET,redirectURI:"http://localhost:3000/api/auth/callback/google"}},session:{expiresIn:604800,updateAge:86400},secret:process.env.BETTER_AUTH_SECRET,baseURL:process.env.BETTER_AUTH_URL||process.env.NEXTAUTH_URL||"http://localhost:3000",rateLimit:{window:6e4,max:10}});async function i(e){try{console.log("[getServerSession] Attempting to get server session...");let s=e.headers,t=await o.api.getSession({headers:s});return console.log("[getServerSession] Session:",t?"found":"not found"),t}catch(e){return console.error("[getServerSession] Error obtaining server session from better-auth:",e),null}}},29294:e=>{"use strict";e.exports=require("next/dist/server/app-render/work-async-storage.external.js")},44870:e=>{"use strict";e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},45655:(e,s,t)=>{"use strict";t.d(s,{db:()=>a});let r=require("@prisma/client"),a=global.prisma||new r.PrismaClient({log:["query"]})},63033:e=>{"use strict";e.exports=require("next/dist/server/app-render/work-unit-async-storage.external.js")},78335:()=>{},96487:()=>{}};var s=require("../../../../webpack-runtime.js");s.C(e);var t=e=>s(s.s=e),r=s.X(0,[719,986,190],()=>t(1555));module.exports=r})();